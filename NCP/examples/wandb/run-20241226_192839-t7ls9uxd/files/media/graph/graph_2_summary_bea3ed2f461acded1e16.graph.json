{"format": "torch", "nodes": [{"name": "model", "id": 133621599199648, "class_name": "ENCPOperator(\n  (singular_fns_x): SequentialModule(\n    (0): EMLP(\n      (net): SequentialModule(\n        (0): FourierBlock(\n          (act): FourierPointwise()\n          (linear): Linear(\n            (_basisexpansion): BlocksBasisExpansion(\n              (block_expansion_('rep_Y', 'regular_[(0,)|(1,)]')): SingleBlockBasisExpansion()\n            )\n          )\n          (model): SequentialModule(\n            (0): Linear(\n              (_basisexpansion): BlocksBasisExpansion(\n                (block_expansion_('rep_Y', 'regular_[(0,)|(1,)]')): SingleBlockBasisExpansion()\n              )\n            )\n            (1): FourierPointwise()\n          )\n        )\n        (1): FourierBlock(\n          (act): FourierPointwise()\n          (linear): Linear(\n            (_basisexpansion): BlocksBasisExpansion(\n              (block_expansion_('regular_[(0,)|(1,)]', 'regular_[(0,)|(1,)]')): SingleBlockBasisExpansion()\n            )\n          )\n          (model): SequentialModule(\n            (0): Linear(\n              (_basisexpansion): BlocksBasisExpansion(\n                (block_expansion_('regular_[(0,)|(1,)]', 'regular_[(0,)|(1,)]')): SingleBlockBasisExpansion()\n              )\n            )\n            (1): FourierPointwise()\n          )\n        )\n        (2): Linear(\n          (_basisexpansion): BlocksBasisExpansion(\n            (block_expansion_('regular_[(0,)|(1,)]', 'regular')): SingleBlockBasisExpansion()\n          )\n        )\n      )\n    )\n    (1): Linear(\n      (_basisexpansion): BlocksBasisExpansion(\n        (block_expansion_('regular', 'IsoSubspace (0,)')): SingleBlockBasisExpansion()\n        (block_expansion_('regular', 'IsoSubspace (1,)')): SingleBlockBasisExpansion()\n      )\n    )\n  )\n  (singular_fns_y): SequentialModule(\n    (0): EMLP(\n      (net): SequentialModule(\n        (0): FourierBlock(\n          (act): FourierPointwise()\n          (linear): Linear(\n            (_basisexpansion): BlocksBasisExpansion(\n              (block_expansion_('rep_Y', 'regular_[(0,)|(1,)]')): SingleBlockBasisExpansion()\n            )\n          )\n          (model): SequentialModule(\n            (0): Linear(\n              (_basisexpansion): BlocksBasisExpansion(\n                (block_expansion_('rep_Y', 'regular_[(0,)|(1,)]')): SingleBlockBasisExpansion()\n              )\n            )\n            (1): FourierPointwise()\n          )\n        )\n        (1): FourierBlock(\n          (act): FourierPointwise()\n          (linear): Linear(\n            (_basisexpansion): BlocksBasisExpansion(\n              (block_expansion_('regular_[(0,)|(1,)]', 'regular_[(0,)|(1,)]')): SingleBlockBasisExpansion()\n            )\n          )\n          (model): SequentialModule(\n            (0): Linear(\n              (_basisexpansion): BlocksBasisExpansion(\n                (block_expansion_('regular_[(0,)|(1,)]', 'regular_[(0,)|(1,)]')): SingleBlockBasisExpansion()\n              )\n            )\n            (1): FourierPointwise()\n          )\n        )\n        (2): Linear(\n          (_basisexpansion): BlocksBasisExpansion(\n            (block_expansion_('regular_[(0,)|(1,)]', 'regular')): SingleBlockBasisExpansion()\n          )\n        )\n      )\n    )\n    (1): Linear(\n      (_basisexpansion): BlocksBasisExpansion(\n        (block_expansion_('regular', 'IsoSubspace (0,)')): SingleBlockBasisExpansion()\n        (block_expansion_('regular', 'IsoSubspace (1,)')): SingleBlockBasisExpansion()\n      )\n    )\n  )\n  (sval_dof): SingularLayer()\n)", "parameters": [["singular_fns_x.0.net.0.linear.weights", [32]], ["singular_fns_x.0.net.1.linear.weights", [2048]], ["singular_fns_x.0.net.2.weights", [768]], ["singular_fns_x.1.bias", [12]], ["singular_fns_x.1.weights", [288]], ["singular_fns_y.0.net.0.linear.weights", [32]], ["singular_fns_y.0.net.1.linear.weights", [2048]], ["singular_fns_y.0.net.2.weights", [768]], ["singular_fns_y.1.bias", [12]], ["singular_fns_y.1.weights", [288]], ["sval_dof.weights", [24]]], "output_shape": [[1024, 24], [1024, 24]], "num_parameters": [32, 2048, 768, 12, 288, 32, 2048, 768, 12, 288, 24]}], "edges": []}